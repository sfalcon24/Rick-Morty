// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Button Primary button renders 1`] = `
<View
  style={
    Array [
      Object {
        "backgroundColor": "#0000FF",
        "borderRadius": 16,
      },
    ]
  }
  variant="primary"
>
  <RNGestureHandlerButton
    activeOpacity={0.105}
    collapsable={false}
    enabled={false}
    handlerTag={1}
    handlerType="NativeViewGestureHandler"
    onActiveStateChange={[Function]}
    onGestureEvent={[Function]}
    onGestureHandlerEvent={[Function]}
    onGestureHandlerStateChange={[Function]}
    onHandlerStateChange={[Function]}
    style={
      Object {
        "alignItems": "center",
        "borderRadius": 16,
        "height": 48,
        "justifyContent": "center",
      }
    }
    underlayColor="black"
  >
    <View
      collapsable={false}
      style={
        Object {
          "backgroundColor": "black",
          "borderBottomLeftRadius": undefined,
          "borderBottomRightRadius": undefined,
          "borderRadius": 16,
          "borderTopLeftRadius": undefined,
          "borderTopRightRadius": undefined,
          "bottom": 0,
          "left": 0,
          "opacity": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        }
      }
    />
    <Text
      style={
        Array [
          Object {
            "fontFamily": undefined,
          },
          Array [
            Object {
              "color": "#FFFFFF",
            },
          ],
        ]
      }
      variant="primary"
    >
      Test
    </Text>
  </RNGestureHandlerButton>
</View>
`;

exports[`Button Secondary button renders 1`] = `
<View
  style={
    Array [
      Object {
        "backgroundColor": "#FFFF00",
        "borderRadius": 16,
      },
    ]
  }
  variant="secondary"
>
  <RNGestureHandlerButton
    activeOpacity={0.105}
    collapsable={false}
    enabled={false}
    handlerTag={2}
    handlerType="NativeViewGestureHandler"
    onActiveStateChange={[Function]}
    onGestureEvent={[Function]}
    onGestureHandlerEvent={[Function]}
    onGestureHandlerStateChange={[Function]}
    onHandlerStateChange={[Function]}
    style={
      Object {
        "alignItems": "center",
        "borderRadius": 16,
        "height": 48,
        "justifyContent": "center",
      }
    }
    underlayColor="black"
  >
    <View
      collapsable={false}
      style={
        Object {
          "backgroundColor": "black",
          "borderBottomLeftRadius": undefined,
          "borderBottomRightRadius": undefined,
          "borderRadius": 16,
          "borderTopLeftRadius": undefined,
          "borderTopRightRadius": undefined,
          "bottom": 0,
          "left": 0,
          "opacity": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        }
      }
    />
    <Text
      style={
        Array [
          Object {
            "fontFamily": undefined,
          },
          Array [
            Object {
              "color": "#000000",
            },
          ],
        ]
      }
      variant="secondary"
    >
      Test
    </Text>
  </RNGestureHandlerButton>
</View>
`;
